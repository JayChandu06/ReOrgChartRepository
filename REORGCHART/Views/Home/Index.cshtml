@model REORGCHART.Models.MyModel
@{
    ViewBag.Title = "Home Page";
}

<div class="row">
    <div class="col-lg-12">
        <div id="myDiagramContainer" style="padding-top:10px;">
            <div id="myDiagramDiv" style="background-color: #ffffff;border: solid 1px white;width:100%;height: 500px"></div>
            <div>
                <div id="myInspector"></div>
            </div>
            <div style="width:100%;display:none;">
                <div>
                    <button id="SaveButton" onclick="save()">Save</button>
                    <button onclick="load()">Load</button>
                    Diagram Model saved in JSON format:
                </div>

                <input type="hidden" value="@Model.Role" id="hdnOrgRole" name="hdnOrgRole" />
                <input type="hidden" value="@Model.Oper" id="hdnOrgType" name="hdnOrgType" />
                <input type="hidden" value="@Model.Country" id="hdnOrgCountry" name="hdnOrgCountry" />
                <input type="hidden" value="@Model.KeyDate" id="hdnOrgKeyDate" name="hdnOrgKeyDate" />
                <input type="hidden" value="@Model.Levels" id="hdnOrgLevel" name="hdnOrgLevel" />
                <input type="hidden" value="@Model.View" id="hdnOrgView" name="hdnOrgView" />
                <input type="hidden" value="@Model.ShowLevel" id="hdnOrgShowLevel" name="hdnOrgShowLevel" />
                <input type="hidden" value="@Model.Version" id="hdnOrgVersion" name="hdnOrgVersion" />

                <textarea id="mySavedModel" style="width:100%;height:250px">{ "class": "go.TreeModel",
                      "nodeDataArray": [
                                {"key":1, "FULL_NAME":"Stella Payne Diaz", "POSITION_TITLE":"CEO"},
                                {"key":2, "FULL_NAME":"Luke Warm", "POSITION_TITLE":"VP Marketing/Sales", "parent":1},
                                {"key":3, "FULL_NAME":"Meg Meehan Hoffa", "POSITION_TITLE":"Sales", "parent":2},
                                {"key":4, "FULL_NAME":"Peggy Flaming", "POSITION_TITLE":"VP Engineering", "parent":1},
                                {"key":5, "FULL_NAME":"Saul Wellingood", "POSITION_TITLE":"Manufacturing", "parent":4},
                                {"key":6, "FULL_NAME":"Al Ligori", "POSITION_TITLE":"Marketing", "parent":2},
                                {"key":7, "FULL_NAME":"Dot Stubadd", "POSITION_TITLE":"Sales Rep", "parent":3},
                                {"key":8, "FULL_NAME":"Les Ismore", "POSITION_TITLE":"Project Mgr", "parent":5},
                                {"key":9, "FULL_NAME":"April Lynn POSITION_TITLE", "title":"Events Mgr", "parent":6},
                                {"key":10, "FULL_NAME":"Xavier POSITION_TITLE", "title":"Engineering", "parent":4},
                                {"key":11, "FULL_NAME":"Anita Hammer", "POSITION_TITLE":"Process", "parent":5},
                                {"key":12, "FULL_NAME":"Billy Aiken", "POSITION_TITLE":"Software", "parent":10},
                                {"key":13, "FULL_NAME":"Stan Wellback", "POSITION_TITLE":"Testing", "parent":10},
                                {"key":14, "FULL_NAME":"Marge Innovera", "POSITION_TITLE":"Hardware", "parent":10},
                                {"key":15, "FULL_NAME":"Evan Elpus", "POSITION_TITLE":"Quality", "parent":5},
                                {"key":16, "FULL_NAME":"Lotta B. Essen", "POSITION_TITLE":"Sales Rep", "parent":3}
                        ]
                    }
                </textarea>

                <textarea id="myTempSavedModel" style="display:none;width:100%;height:250px">{ "class": "go.TreeModel",
                      "nodeDataArray": [
                                {"key":1, "FULL_NAME":"Stella Payne Diaz", "POSITION_TITLE":"CEO"},
                                {"key":2, "FULL_NAME":"Luke Warm", "POSITION_TITLE":"VP Marketing/Sales", "parent":1},
                                {"key":3, "FULL_NAME":"Meg Meehan Hoffa", "POSITION_TITLE":"Sales", "parent":2},
                                {"key":4, "FULL_NAME":"Peggy Flaming", "POSITION_TITLE":"VP Engineering", "parent":1},
                                {"key":5, "FULL_NAME":"Saul Wellingood", "POSITION_TITLE":"Manufacturing", "parent":4},
                                {"key":6, "FULL_NAME":"Al Ligori", "POSITION_TITLE":"Marketing", "parent":2},
                                {"key":7, "FULL_NAME":"Dot Stubadd", "POSITION_TITLE":"Sales Rep", "parent":3},
                                {"key":8, "FULL_NAME":"Les Ismore", "POSITION_TITLE":"Project Mgr", "parent":5},
                                {"key":9, "FULL_NAME":"April Lynn POSITION_TITLE", "title":"Events Mgr", "parent":6},
                                {"key":10, "FULL_NAME":"Xavier POSITION_TITLE", "title":"Engineering", "parent":4},
                                {"key":11, "FULL_NAME":"Anita Hammer", "POSITION_TITLE":"Process", "parent":5},
                                {"key":12, "FULL_NAME":"Billy Aiken", "POSITION_TITLE":"Software", "parent":10},
                                {"key":13, "FULL_NAME":"Stan Wellback", "POSITION_TITLE":"Testing", "parent":10},
                                {"key":14, "FULL_NAME":"Marge Innovera", "POSITION_TITLE":"Hardware", "parent":10},
                                {"key":15, "FULL_NAME":"Evan Elpus", "POSITION_TITLE":"Quality", "parent":5},
                                {"key":16, "FULL_NAME":"Lotta B. Essen", "POSITION_TITLE":"Sales Rep", "parent":3}
                        ]
                    }
                </textarea>
            </div>
        </div>
    </div>
</div>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js?cid=@Model.UseDate"></script>
<script src="~/assets/js/vendor/go.js?cid=@Model.UseDate"></script>

<script type="text/javascript">

    $(document).ready(function () {
        //document.getElementById("mySavedModel").value = "{ \"class\": \"go.TreeModel\",  \"nodeDataArray\":" + @Model.ChartData + " }";
        //var h = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        //var w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

        //init(w, h);

        var JsonData = {
            UserType: $("#hdnOrgRole").val(),
            Country: "",
            ShowLevel: $("#hdnOrgShowLevel").val(),
            Levels: $("#hdnOrgLevel").val(),
            Oper: $("#hdnOrgType").val(),
            Version: $("#hdnOrgVersion").val()
        };
        $.ajax({
            type: "POST",
            url: "/home/GetOrgChartData",
            data: JsonData,
            async: false,
            dateType: "json",
            success: function (jsonStr) {
                ShowSelectedValues();

                document.getElementById("mySavedModel").value = "{ \"class\": \"go.TreeModel\",  \"nodeDataArray\":" + jsonStr + " }";
                var h = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
                var w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

                init(w, h);
            }
        });
    });

    function LoadDataFromServer() {
        var JsonData = {
            Country: "",
            ShowLevel: $("#hdnOrgShowLevel").val(),
            Levels: $("#hdnOrgLevel").val(),
            Oper: $("#hdnOrgType").val(),
            Version: $("#hdnOrgVersion").val()
        };
        $.ajax({
            type: "POST",
            url: "/home/GetOrgChartData",
            data: JsonData,
            async: false,
            dateType: "json",
            success: function (jsonStr) {
                loadJSON("{ \"class\": \"go.TreeModel\",  \"nodeDataArray\":" + jsonStr + " }");
            }
        });
    }

    function SetSelectedValues() {
        var JsonData = {
            KeyDate: $("#hdnOrgKeyDate").val(),
            UsedView: $("#hdnOrgView").val(),
            Country: $("#hdnOrgCountry").val(),
            ShowLevel: $("#hdnOrgShowLevel").val(),
            Levels: $("#hdnOrgLevel").val(),
            Oper: $("#hdnOrgType").val(),
            Version: $("#hdnOrgVersion").val(),
            Role: $("#hdnOrgRole").val()
        };
        $.ajax({
            type: "POST",
            url: "/home/SetSelectedValues",
            data: JsonData,
            async: false,
            dateType: "json",
            success: function (jsonStr) {
                ShowSelectedValues();
            }
        });
    }

    function ShowSelectedValues() {
        var sValue = $("#hdnOrgRole").val();
        $("#spnOrgRole").html(sValue);

        $("#liSaveVersion").hide();
        $("#liLoadVersion").hide();
        $("#liUploadVersion").hide();
        $("#liDownloadVersion").hide();
        $("#liFinalizeVersion").hide();
        $("#liDivider1").hide();
        $("#liUpdateTable").hide();
        $("#liDivider2").hide();
        if (sValue == "Player") {
            $("#liSaveVersion").show();
            $("#liLoadVersion").show();
            $("#liUploadVersion").show();
            $("#liDownloadVersion").show();
            $("#liDivider1").show();
        }
        if (sValue == "Finalyzer") {
            $("#liFinalizeVersion").show();
            $("#liDivider1").show();
        }
        if (sValue == "Updater") {
            $("#liUpdateTable").show();
            $("#liDivider2").show();
        }

        var sValue=$("#hdnOrgType").val();
        if (sValue == "OV") $("#spnOrgType").html("Operational View");
        else if (sValue == "LV") $("#spnOrgType").html("Legal View");

        sValue=$("#hdnOrgLevel").val();
        if (sValue == "One") $("#spnOrgLevel").html("Level One");
        else if (sValue == "Two") $("#spnOrgLevel").html("Level Two");

        sValue=$("#hdnOrgView").val();
        if (sValue == "Sample") $("#spnOrgView").html("Sample View");
        else if (sValue == "Normal") $("#spnOrgView").html("Normal View");
        else if (sValue == "Cost") $("#spnOrgView").html("Position Cost View");
    }

    function CreateOrgChart(sType, sValue)
    {
        switch (sType) {
            case 'Role':
                $("#hdnOrgRole").val(sValue);
                $("#spnOrgRole").html(sValue);

                SetSelectedValues();
                if (sValue != "Updater" && sValue != "Finalyzer") {
                    return false;
                }
                return false;

                break;
            case 'Type':
                $("#hdnOrgType").val(sValue);
                if (sValue == "OV") $("#spnOrgType").html("Operational View");
                else if (sValue == "LV") $("#spnOrgType").html("Legal View");

                SetSelectedValues();

                break;
            case 'Level':
                $("#hdnOrgLevel").val(sValue);
                if (sValue == "One") $("#spnOrgLevel").html("Level One");
                else if (sValue == "Two") $("#spnOrgLevel").html("Level Two");

                SetSelectedValues();

                break;
            case 'View':
                $("#hdnOrgView").val(sValue);
                if (sValue == "Sample") $("#spnOrgView").html("Sample View");
                else if (sValue == "Normal") $("#spnOrgView").html("Normal View");
                else if (sValue == "Cost") $("#spnOrgView").html("Position Cost View");

                if (sValue == "Sample") {
                    SetSelectedValues();
                    loadJSON($("#myTempSavedModel").val());

                    return false;
                }
                else {
                    SetSelectedValues();
                    return true;
                }

                break;
        }

        return true;
    }

    function VersionControl(vc) {
        var JsonData = {
            VersionControl: vc,
            Oper: $("#hdnOrgType").val(),
            Version: $("#hdnOrgVersion").val(),
            ChartData: $("#mySavedModel").val()
        };
        $.ajax({
            type: "POST",
            url: "/home/VersionControl",
            data: JsonData,
            async: false,
            dateType: "json",
            success: function (jsonStr) {
                loadJSON("{ \"class\": \"go.TreeModel\",  \"nodeDataArray\":" + jsonStr + " }");
            }
        });

        return false;
    }

    function init(w, h) {
        if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
        var $ = go.GraphObject.make;  // for conciseness in defining templates

        myDiagram =
            $(go.Diagram, "myDiagramDiv", // must be the ID or reference to div
                {
                    initialContentAlignment: go.Spot.Center,
                    maxSelectionCount: 1, // users can select only one part at a time
                    validCycle: go.Diagram.CycleDestinationTree, // make sure users can only create trees
                    "clickCreatingTool.archetypeNodeData": {}, // allow double-click in background to create a new node
                    "clickCreatingTool.insertPart": function (loc) {  // customize the data for the new node
                        this.archetypeNodeData = {
                            key: getNextKey(), // assign the key based on the number of nodes
                            name: "(new person)",
                            title: ""
                        };
                        return go.ClickCreatingTool.prototype.insertPart.call(this, loc);
                    },
                    layout:
                        $(go.TreeLayout,
                            {
                                treeStyle: go.TreeLayout.StyleLastParents,
                                arrangement: go.TreeLayout.ArrangementVertical,
                                // properties for most of the tree:
                                angle: 90,
                                layerSpacing: 20,
                                nodeSpacing: 20,
                                breadthLimit: w,
                                // properties for the "last parents":
                                alternateAngle: 90,
                                alternateLayerSpacing: 35,
                                alternateAlignment: go.TreeLayout.AlignmentBus,
                                alternateNodeSpacing: 20
                            }),
                    "undoManager.isEnabled": true // enable undo & redo
                });

        // when the document is modified, add a "*" to the title and enable the "Save" button
        myDiagram.addDiagramListener("Modified", function (e) {
            var button = document.getElementById("SaveButton");
            if (button) button.disabled = !myDiagram.isModified;
            var idx = document.title.indexOf("*");
            if (myDiagram.isModified) {
                if (idx < 0) document.title += "*";
            } else {
                if (idx >= 0) document.title = document.title.substr(0, idx);
            }
        });

        // manage boss info manually when a node or link is deleted from the diagram
        myDiagram.addDiagramListener("SelectionDeleting", function (e) {
            var part = e.subject.first(); // e.subject is the myDiagram.selection collection,
            // so we'll get the first since we know we only have one selection
            myDiagram.startTransaction("clear boss");
            if (part instanceof go.Node) {
                var it = part.findTreeChildrenNodes(); // find all child nodes
                while (it.next()) { // now iterate through them and clear out the boss information
                    var child = it.value;
                    var bossText = child.findObject("boss"); // since the boss TextBlock is named, we can access it by name
                    if (bossText === null) return;
                    bossText.text = "";
                }
            } else if (part instanceof go.Link) {
                var child = part.toNode;
                var bossText = child.findObject("boss"); // since the boss TextBlock is named, we can access it by name
                if (bossText === null) return;
                bossText.text = "";
            }
            myDiagram.commitTransaction("clear boss");
        });

        var levelColors = ["#AC193D", "#2672EC", "#8C0095", "#5133AB",
            "#008299", "#D24726", "#008A00", "#094AB2"];

        // override TreeLayout.commitNodes to also modify the background brush based on the tree depth level
        myDiagram.layout.commitNodes = function () {
            go.TreeLayout.prototype.commitNodes.call(myDiagram.layout);  // do the standard behavior
            // then go through all of the vertexes and set their corresponding node's Shape.fill
            // to a brush dependent on the TreeVertex.level value
            myDiagram.layout.network.vertexes.each(function (v) {
                if (v.node) {
                    var level = v.level % (levelColors.length);
                    var colors = levelColors[level];
                    var shape = v.node.findObject("SHAPE");
                    //if (shape) shape.fill = $(go.Brush, "Linear", { 0: color, 1: go.Brush.lightenBy(color, 0.05), start: go.Spot.Left, end: go.Spot.Right });
                    if (shape) shape.fill = $(go.Brush, "Linear", { 0: levelColors[level], 1: levelColors[level], start: go.Spot.Left, end: go.Spot.Right });
                }
            });
        };

        // This function is used to find a suitable ID when modifying/creating nodes.
        // We used the counter combined with findNodeDataForKey to ensure uniqueness.
        function getNextKey() {
            var key = nodeIdCounter;
            while (myDiagram.model.findNodeDataForKey(key) !== null) {
                key = nodeIdCounter--;
            }
            return key;
        }

        var nodeIdCounter = -1; // use a sequence to guarantee key uniqueness as we add/remove/modify nodes

        // when a node is double-clicked, add a child to it
        function nodeDoubleClick(e, obj) {
            var clicked = obj.part;
            if (clicked !== null) {
                var thisemp = clicked.data;
                myDiagram.startTransaction("add employee");
                var newemp = { key: getNextKey(), name: "(new person)", title: "", parent: thisemp.key };
                myDiagram.model.addNodeData(newemp);
                myDiagram.commitTransaction("add employee");
            }
        }

        // this is used to determine feedback during drags
        function mayWorkFor(node1, node2) {
            if (!(node1 instanceof go.Node)) return false;  // must be a Node
            if (node1 === node2) return false;  // cannot work for yourself
            if (node2.isInTreeOf(node1)) return false;  // cannot work for someone who works for you
            return true;
        }

        // This function provides a common style for most of the TextBlocks.
        // Some of these values may be overridden in a particular TextBlock.
        function textStyle() {
            return { font: "9pt  Segoe UI,sans-serif", stroke: "white" };
        }

        // This converter is used by the Picture.
        function findHeadShot(key) {
            if (key < 0 || key > 16) return "images/HSnopic.png"; // There are only 16 images on the server
            return "images/HS" + key + ".png"
        }

        // define the Node template
        if (document.getElementById("hdnOrgView").value == "Sample") {
            myDiagram.nodeTemplate =
                $(go.Node, "Auto",
                    { doubleClick: nodeDoubleClick },
                    { // handle dragging a Node onto a Node to (maybe) change the reporting relationship
                        mouseDragEnter: function (e, node, prev) {
                            var diagram = node.diagram;
                            var selnode = diagram.selection.first();
                            if (!mayWorkFor(selnode, node)) return;
                            var shape = node.findObject("SHAPE");
                            if (shape) {
                                shape._prevFill = shape.fill;  // remember the original brush
                                shape.fill = "darkred";
                            }
                        },
                        mouseDragLeave: function (e, node, next) {
                            var shape = node.findObject("SHAPE");
                            if (shape && shape._prevFill) {
                                shape.fill = shape._prevFill;  // restore the original brush
                            }
                        },
                        mouseDrop: function (e, node) {
                            var diagram = node.diagram;
                            var selnode = diagram.selection.first();  // assume just one Node in selection
                            if (mayWorkFor(selnode, node)) {
                                // find any existing link into the selected node
                                var link = selnode.findTreeParentLink();
                                if (link !== null) {  // reconnect any existing link
                                    link.fromNode = node;
                                } else {  // else create a new link
                                    diagram.toolManager.linkingTool.insertLink(node, node.port, selnode, selnode.port);
                                }
                            }
                        }
                    },
                    // for sorting, have the Node.text be the data.name
                    new go.Binding("text", "name"),
                    // bind the Part.layerName to control the Node's layer depending on whether it isSelected
                    new go.Binding("layerName", "isSelected", function (sel) { return sel ? "Foreground" : ""; }).ofObject(),
                    // define the node's outer shape
                    $(go.Shape, "Rectangle",
                        {
                            name: "SHAPE", fill: "white", stroke: null,
                            // set the port properties:
                            portId: "", fromLinkable: true, toLinkable: true, cursor: "pointer"
                        }),
                    $(go.Panel, "Horizontal",
                        $(go.Picture,
                            {
                                name: "Picture",
                                desiredSize: new go.Size(39, 50),
                                margin: new go.Margin(6, 8, 6, 10),
                            },
                            new go.Binding("source", "key", findHeadShot)),
                        // define the panel where the text will appear
                        $(go.Panel, "Table",
                            {
                                maxSize: new go.Size(150, 999),
                                margin: new go.Margin(6, 10, 0, 3),
                                defaultAlignment: go.Spot.Left
                            },
                            $(go.RowColumnDefinition, { column: 2, width: 4 }),
                            $(go.TextBlock, textStyle(),  // the name
                                {
                                    row: 0, column: 0, columnSpan: 5,
                                    font: "12pt Segoe UI,sans-serif",
                                    editable: true, isMultiline: false,
                                    minSize: new go.Size(10, 16)
                                },
                                new go.Binding("text", "FULL_NAME").makeTwoWay()),
                            $(go.TextBlock, "Title: ", textStyle(),
                                { row: 1, column: 0 }),
                            $(go.TextBlock, textStyle(),
                                {
                                    row: 1, column: 1, columnSpan: 4,
                                    editable: true, isMultiline: false,
                                    minSize: new go.Size(10, 14),
                                    margin: new go.Margin(0, 0, 0, 3)
                                },
                                new go.Binding("text", "POSITION_TITLE").makeTwoWay()),
                            $(go.TextBlock, textStyle(),
                                { row: 2, column: 0 },
                                new go.Binding("text", "key", function (v) { return "ID: " + v; })),
                            $(go.TextBlock, textStyle(),  // the comments
                                {
                                    row: 3, column: 0, columnSpan: 5,
                                    font: "italic 9pt sans-serif",
                                    wrap: go.TextBlock.WrapFit,
                                    editable: true,  // by default newlines are allowed
                                    minSize: new go.Size(10, 14)
                                },
                                new go.Binding("text", "comments").makeTwoWay())
                        )  // end Table Panel
                    ) // end Horizontal Panel
                );  // end Node
        }
        else if (document.getElementById("hdnOrgView").value == "Normal") {
            myDiagram.nodeTemplate =
                $(go.Node, "Auto",
                    { doubleClick: nodeDoubleClick },
                    { // handle dragging a Node onto a Node to (maybe) change the reporting relationship
                        mouseDragEnter: function (e, node, prev) {
                            var diagram = node.diagram;
                            var selnode = diagram.selection.first();
                            if (!mayWorkFor(selnode, node)) return;
                            var shape = node.findObject("SHAPE");
                            if (shape) {
                                shape._prevFill = shape.fill;  // remember the original brush
                                shape.fill = "darkred";
                            }
                        },
                        mouseDragLeave: function (e, node, next) {
                            var shape = node.findObject("SHAPE");
                            if (shape && shape._prevFill) {
                                shape.fill = shape._prevFill;  // restore the original brush
                            }
                        },
                        mouseDrop: function (e, node) {
                            var diagram = node.diagram;
                            var selnode = diagram.selection.first();  // assume just one Node in selection
                            if (mayWorkFor(selnode, node)) {
                                // find any existing link into the selected node
                                var link = selnode.findTreeParentLink();
                                if (link !== null) {  // reconnect any existing link
                                    link.fromNode = node;
                                } else {  // else create a new link
                                    diagram.toolManager.linkingTool.insertLink(node, node.port, selnode, selnode.port);
                                }
                            }
                        }
                    },
                    // for sorting, have the Node.text be the data.name
                    new go.Binding("text", "name"),
                    // bind the Part.layerName to control the Node's layer depending on whether it isSelected
                    new go.Binding("layerName", "isSelected", function (sel) { return sel ? "Foreground" : ""; }).ofObject(),
                    // define the node's outer shape
                    $(go.Shape, "Rectangle",
                        {
                            name: "SHAPE", fill: "white", stroke: null,
                            // set the port properties:
                            portId: "", fromLinkable: true, toLinkable: true, cursor: "pointer"
                        }),
                    $(go.Panel, "Horizontal",
                        $(go.Picture,
                            {
                                name: "Picture",
                                desiredSize: new go.Size(39, 50),
                                margin: new go.Margin(6, 8, 6, 10),
                            },
                            new go.Binding("source", "key", findHeadShot)),
                        // define the panel where the text will appear
                        $(go.Panel, "Table",
                            {
                                maxSize: new go.Size(150, 999),
                                margin: new go.Margin(6, 10, 0, 3),
                                defaultAlignment: go.Spot.Left
                            },
                            $(go.RowColumnDefinition, { column: 2, width: 4 }),
                            $(go.TextBlock, textStyle(),  // the name
                                {
                                    row: 0, column: 0, columnSpan: 5,
                                    font: "12pt Segoe UI,sans-serif",
                                    editable: true, isMultiline: false,
                                    minSize: new go.Size(10, 16)
                                },
                                new go.Binding("text", "FULL_NAME").makeTwoWay()),
                            $(go.TextBlock, "Title: ", textStyle(),
                                { row: 1, column: 0 }),
                            $(go.TextBlock, textStyle(),
                                {
                                    row: 1, column: 1, columnSpan: 4,
                                    editable: true, isMultiline: false,
                                    minSize: new go.Size(10, 14),
                                    margin: new go.Margin(0, 0, 0, 3)
                                },
                                new go.Binding("text", "POSITION_TITLE").makeTwoWay()),
                            $(go.TextBlock, textStyle(),
                                { row: 2, column: 0 },
                                new go.Binding("text", "key", function (v) { return "ID: " + v; })),
                            $(go.TextBlock, textStyle(),
                                { name: "boss", row: 2, column: 3, }, // we include a name so we can access this TextBlock when deleting Nodes/Links
                                new go.Binding("text", "parent", function (v) { return "Boss: " + v; })),
                            $(go.TextBlock, textStyle(),  // the comments
                                {
                                    row: 3, column: 0, columnSpan: 5,
                                    font: "italic 9pt sans-serif",
                                    wrap: go.TextBlock.WrapFit,
                                    editable: true,  // by default newlines are allowed
                                    minSize: new go.Size(10, 14)
                                },
                                new go.Binding("text", "comments").makeTwoWay())
                        )  // end Table Panel
                    ) // end Horizontal Panel
                );  // end Node
        }
        else if (document.getElementById("hdnOrgView").value == "Cost") {
            myDiagram.nodeTemplate =
                $(go.Node, "Auto",
                    { doubleClick: nodeDoubleClick },
                    { // handle dragging a Node onto a Node to (maybe) change the reporting relationship
                        mouseDragEnter: function (e, node, prev) {
                            var diagram = node.diagram;
                            var selnode = diagram.selection.first();
                            if (!mayWorkFor(selnode, node)) return;
                            var shape = node.findObject("SHAPE");
                            if (shape) {
                                shape._prevFill = shape.fill;  // remember the original brush
                                shape.fill = "darkred";
                            }
                        },
                        mouseDragLeave: function (e, node, next) {
                            var shape = node.findObject("SHAPE");
                            if (shape && shape._prevFill) {
                                shape.fill = shape._prevFill;  // restore the original brush
                            }
                        },
                        mouseDrop: function (e, node) {
                            var diagram = node.diagram;
                            var selnode = diagram.selection.first();  // assume just one Node in selection
                            if (mayWorkFor(selnode, node)) {
                                // find any existing link into the selected node
                                var link = selnode.findTreeParentLink();
                                if (link !== null) {  // reconnect any existing link
                                    link.fromNode = node;
                                } else {  // else create a new link
                                    diagram.toolManager.linkingTool.insertLink(node, node.port, selnode, selnode.port);
                                }
                            }
                        }
                    },
                    // for sorting, have the Node.text be the data.name
                    new go.Binding("text", "name"),
                    // bind the Part.layerName to control the Node's layer depending on whether it isSelected
                    new go.Binding("layerName", "isSelected", function (sel) { return sel ? "Foreground" : ""; }).ofObject(),
                    // define the node's outer shape
                    $(go.Shape, "Rectangle",
                        {
                            name: "SHAPE", fill: "white", stroke: null,
                            // set the port properties:
                            portId: "", fromLinkable: true, toLinkable: true, cursor: "pointer"
                        }),
                    $(go.Panel, "Horizontal",
                        $(go.Picture,
                            {
                                name: "Picture",
                                desiredSize: new go.Size(39, 50),
                                margin: new go.Margin(6, 8, 6, 10),
                            },
                            new go.Binding("source", "key", findHeadShot)),
                        // define the panel where the text will appear
                        $(go.Panel, "Table",
                            {
                                maxSize: new go.Size(150, 999),
                                margin: new go.Margin(6, 10, 0, 3),
                                defaultAlignment: go.Spot.Left
                            },
                            $(go.RowColumnDefinition, { column: 2, width: 4 }),
                            $(go.TextBlock, textStyle(),  // the name
                                {
                                    row: 0, column: 0, columnSpan: 5,
                                    font: "12pt Segoe UI,sans-serif",
                                    editable: true, isMultiline: false,
                                    minSize: new go.Size(10, 16)
                                },
                                new go.Binding("text", "FULL_NAME").makeTwoWay()),
                            $(go.TextBlock, "Title: ", textStyle(),
                                { row: 1, column: 0 }),
                            $(go.TextBlock, textStyle(),
                                {
                                    row: 1, column: 1, columnSpan: 4,
                                    editable: true, isMultiline: false,
                                    minSize: new go.Size(10, 14),
                                    margin: new go.Margin(0, 0, 0, 3)
                                },
                                new go.Binding("text", "POSITION_TITLE").makeTwoWay()),
                            $(go.TextBlock, textStyle(),
                                { row: 2, column: 0 },
                                new go.Binding("text", "key", function (v) { return "ID: " + v; })),
                            $(go.TextBlock, textStyle(),
                                { name: "boss", row: 2, column: 3, }, // we include a name so we can access this TextBlock when deleting Nodes/Links
                                new go.Binding("text", "parent", function (v) { return "Boss: " + v; })),
                            $(go.TextBlock, "Cost: ", textStyle(),
                                { row: 3, column: 0 }),
                            $(go.TextBlock, textStyle(),  // the Position Cost
                                {
                                    row: 3, column: 1, columnSpan: 5,
                                    font: "9pt sans-serif",
                                    wrap: go.TextBlock.WrapFit,
                                    editable: true,  // by default newlines are allowed
                                    minSize: new go.Size(10, 14)
                                },
                                new go.Binding("text", "POSITION_COST").makeTwoWay())
                        )  // end Table Panel
                    ) // end Horizontal Panel
                );  // end Node
        }

        // the context menu allows users to make a position vacant,
        // remove a role and reassign the subtree, or remove a department
        myDiagram.nodeTemplate.contextMenu =
            $(go.Adornment, "Vertical",
                $("ContextMenuButton",
                    $(go.TextBlock, "Vacate Position"),
                    {
                        click: function (e, obj) {
                            var node = obj.part.adornedPart;
                            if (node !== null) {
                                var thisemp = node.data;
                                myDiagram.startTransaction("vacate");
                                // update the key, name, and comments
                                myDiagram.model.setKeyForNodeData(thisemp, getNextKey());
                                myDiagram.model.setDataProperty(thisemp, "name", "(Vacant)");
                                myDiagram.model.setDataProperty(thisemp, "comments", "");
                                myDiagram.commitTransaction("vacate");
                            }
                        }
                    }
                ),
                $("ContextMenuButton",
                    $(go.TextBlock, "Remove Role"),
                    {
                        click: function (e, obj) {
                            // reparent the subtree to this node's boss, then remove the node
                            var node = obj.part.adornedPart;
                            if (node !== null) {
                                myDiagram.startTransaction("reparent remove");
                                var chl = node.findTreeChildrenNodes();
                                // iterate through the children and set their parent key to our selected node's parent key
                                while (chl.next()) {
                                    var emp = chl.value;
                                    myDiagram.model.setParentKeyForNodeData(emp.data, node.findTreeParentNode().data.key);
                                }
                                // and now remove the selected node itself
                                myDiagram.model.removeNodeData(node.data);
                                myDiagram.commitTransaction("reparent remove");
                            }
                        }
                    }
                ),
                $("ContextMenuButton",
                    $(go.TextBlock, "Remove Department"),
                    {
                        click: function (e, obj) {
                            // remove the whole subtree, including the node itself
                            var node = obj.part.adornedPart;
                            if (node !== null) {
                                myDiagram.startTransaction("remove dept");
                                myDiagram.removeParts(node.findTreeParts());
                                myDiagram.commitTransaction("remove dept");
                            }
                        }
                    }
                )
            );

        // define the Link template
        myDiagram.linkTemplate =
            $(go.Link, go.Link.Orthogonal,
                { corner: 5, relinkableFrom: true, relinkableTo: true },
                $(go.Shape, { strokeWidth: 4, stroke: "#00a4a4" }));  // the link shape

        // read in the JSON-format data from the "mySavedModel" element
        load();


        // support editing the properties of the selected person in HTML
        if (window.Inspector) myInspector = new Inspector("myInspector", myDiagram,
            {
                properties: {
                    "key": { readOnly: true },
                    "comments": {}
                }
            });
    }

    // Show the diagram's model in JSON format
    function save() {
        document.getElementById("mySavedModel").value = myDiagram.model.toJson();
        myDiagram.isModified = false;
    }
    function load() {
        myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
    }

    // Show the diagram's model in JSON format
    function loadJSON(strJson) {

        if (strJson) {
            document.getElementById("mySavedModel").value = strJson;
        }
        else document.getElementById("mySavedModel").value = "{ \"class\": \"go.TreeModel\",  \"nodeDataArray\":\"\" }"; 

        myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
    }
</script>


